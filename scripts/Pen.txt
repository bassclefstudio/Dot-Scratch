//----- Variables -----------------------------------------------------------------------------------------------------

draw.c1 = 43
draw.f = 0
draw.x = 143.10115013989
draw.x2 = 346.66666666667
draw.y = 100
draw.y2 = -100
ghosts.c1 = 5
inBounds = false
maxGhosts = 5
padding = 10
penBounds.x = 250
penBounds.y = 190


//----- Lists ---------------------------------------------------------------------------------------------------------

clippingRegions = { 
    
    
    
    
}
prevPlayerX = { 
    387.32586260492
    387.32586260492
    387.32586260492
    387.32586260492
    387.32586260492
}
prevPlayerY = { 
    340
    340
    340
    340
    340
}


//----- Broadcast received events -------------------------------------------------------------------------------------

WhenBroadcastReceived(DrawFrame)
{
    If ((UIEnabled == "true") And (UIName == "Editor"))
    {
        Call Draw Frame((Not ()));
        Event.Broadcast("RenderGameUI");
    }
    Else
    {
        Call Draw Frame();
    }
}

WhenBroadcastReceived(Initialize)
{
    Call Initialize;
}

WhenBroadcastReceived(StartDraw)
{
    Call Start Pen;
}

WhenBroadcastReceived(StopDraw)
{
    DrawEnabled = "false";
}


//----- Custom blocks -------------------------------------------------------------------------------------------------

Define Draw Foreground Controls (warp=true)
{
    If (Not ((EditorDrawY == "")))
    {
        Call Draw Segment ((EditorDrawX)(EditorDrawY) ,("")("") ) type("Edit") isEditor((Not ()));
    }
    If (Not ((EditorSelectedId == 0)))
    {
        If (EditorSelectionType == 0)
        {
            Call Draw Segment ((SegmentX1[EditorSelectedId])(SegmentY1[EditorSelectedId]) ,(SegmentX2[EditorSelectedId])(SegmentY2[EditorSelectedId]) ) type("Edit") isEditor((Not ()));
        }
        Else
        {
            If (EditorSelectionType == 1)
            {
                Call Draw Segment ((SegmentX1[EditorSelectedId])(SegmentY1[EditorSelectedId]) ,("")("") ) type("Edit") isEditor((Not ()));
            }
            Else
            {
                If (EditorSelectionType == 2)
                {
                    Call Draw Segment ((SegmentX2[EditorSelectedId])(SegmentY2[EditorSelectedId]) ,("")("") ) type("Edit") isEditor((Not ()));
                }
                Else
                {
                }
            }
        }
    }
}

Define Draw Frame(bool Editor?) (warp=true)
{
    Call Draw Map (isEditor(Editor?) );
    If Editor?
    {
        Call Draw Foreground Controls;
    }
}

Define Draw Line(string X1)(string Y1) to(string X2)(string Y2) color(string R)(string G)(string B) size(string S) transparency(string A) (warp=true)
{
    Call Is line(X1)(Y1) to(X2)(Y2) in bounds?;
    If (inBounds == "true")
    {
        Pen.Clear();
        Pen.SetPenSizeTo(1);
        Pen.SetPenTo(transparency, 100);
        Call Go to(X1)(Y1);
        Pen.Down();
        Call Set Pen Color | RGBA(R)(G)(B)(A);
        Call Set pen size to(S);
        Call Go to(X2)(Y2);
    }
}

Define Draw Map (isEditor(bool Editor?) ) (warp=true)
{
    draw.c1 = 0;
    Repeat (List.Length(SegmentType))
    {
        draw.c1 += 1;
        Call Draw Segment ((SegmentX1[draw.c1])(SegmentY1[draw.c1]) ,(SegmentX2[draw.c1])(SegmentY2[draw.c1]) ) type(SegmentType[draw.c1]) isEditor(Editor?);
    }
}

Define Draw Player (warp=true)
{
    ghosts.c1 = 0;
    Pen.Clear();
    Call Set Pen Color | RGBA(255)(255)(255)("");
    Repeat (List.Length(prevPlayerX))
    {
        ghosts.c1 += 1;
        Pen.SetPenTo(transparency, (100 - (ghosts.c1 * (100 / maxGhosts))));
        Call Set pen size to((2 + (ghosts.c1 * (8 / maxGhosts))));
        Call Go to(prevPlayerX[ghosts.c1])(prevPlayerY[ghosts.c1]);
        Pen.Down();
        Pen.Clear();
    }
    Call Set Pen Color | RGBA(255)(255)(255)("");
    Call Set pen size to(12);
    Call Go to(PlayerX)(PlayerY);
    Pen.Down();
    Pen.Clear();
    If (PhysicsEnabled == "true")
    {
        draw.f += FrameSpeed;
        If (Not ((draw.f < 1)))
        {
            draw.f = 0;
            List.Add(prevPlayerX, PlayerX);
            List.Add(prevPlayerY, PlayerY);
            If (List.Length(prevPlayerX) > maxGhosts)
            {
                List.DeleteItem(prevPlayerX, 1);
                List.DeleteItem(prevPlayerY, 1);
            }
        }
    }
}

Define Draw Point(string X)(string Y) color(string R)(string G)(string B) size(string S) transparency(string A) (warp=true)
{
    Call Is point(X)(Y) in bounds?;
    If (inBounds == "true")
    {
        Pen.Clear();
        Call Go to(X)(Y);
        Call Set Pen Color | RGBA(R)(G)(B)(A);
        Call Set pen size to(S);
        Pen.Down();
    }
}

Define Draw Segment ((string X1)(string Y1) ,(string X2)(string Y2) ) type(string T) isEditor(bool Editor?) (warp=true)
{
    If (T == "Wall")
    {
        Call Draw Line(X1)(Y1) to(X2)(Y2) color(255)(255)(255) size(10) transparency(255);
    }
    Else
    {
        If (T == "Lava")
        {
            Call Draw Line(X1)(Y1) to(X2)(Y2) color(255)(40)(40) size(10) transparency("");
        }
        Else
        {
            If (T == "Bounce")
            {
                Call Draw Line(X1)(Y1) to(X2)(Y2) color(255)(200)(100) size(10) transparency("");
            }
            Else
            {
                If (T == "Flip")
                {
                    Call Draw Line(X1)(Y1) to(X2)(Y2) color(255)(0)(255) size(5) transparency("");
                }
                Else
                {
                    If (T == "Portal")
                    {
                        Call Draw Point(X1)(Y1) color(100)(100)(255) size(16) transparency("");
                        Call Draw Point(X1)(Y1) color(120)(120)(255) size(12) transparency("");
                    }
                    Else
                    {
                        If (T == "Teleport")
                        {
                            Call Draw Line(X1)(Y1) to(X2)(Y2) color(100)(100)(255) size(8) transparency("");
                            Call Draw Line(X1)(Y1) to(X2)(Y2) color(120)(120)(255) size(4) transparency("");
                            If Editor?
                            {
                                Call Draw Point(X1)(Y1) color(200)(40)(255) size(12) transparency(0);
                            }
                        }
                        Else
                        {
                            If (T == "End")
                            {
                                Call Draw Point(X1)(Y1) color(100)(255)(100) size(16) transparency("");
                            }
                            Else
                            {
                                If ((T == "Camera") And Editor?)
                                {
                                    Call Is line(X1)(Y1) to(X2)(Y2) in bounds?;
                                    If (inBounds == "true")
                                    {
                                        Pen.Clear();
                                        Pen.SetPenSizeTo(1);
                                        Pen.SetPenTo(transparency, 100);
                                        Call Go to(X1)(Y1);
                                        Pen.Down();
                                        Call Set Pen Color | RGBA(200)(200)(255)(150);
                                        Call Set pen size to(6);
                                        Call Go to(X1)(Y2);
                                        Call Go to(X2)(Y2);
                                        Call Go to(X2)(Y1);
                                        Call Go to(X1)(Y1);
                                        Call Go to(X2)(Y2);
                                    }
                                }
                                Else
                                {
                                    If ((T == "Edit") And Editor?)
                                    {
                                        If (X2 == "")
                                        {
                                            Call Draw Point(X1)(Y1) color(255)(255)(255) size(20) transparency(150);
                                        }
                                        Else
                                        {
                                            Call Draw Line(X1)(Y1) to(X2)(Y2) color(255)(255)(255) size(20) transparency(150);
                                        }
                                    }
                                    Else
                                    {
                                        If ((T == "Start") And Editor?)
                                        {
                                            Call Draw Point(X1)(Y1) color(255)(255)(255) size(10) transparency("");
                                        }
                                        Else
                                        {
                                            If ((T == "UI") And Editor?)
                                            {
                                                Call Draw Line(X1)(Y1) to(X2)(Y2) color(100)(100)(100) size(12) transparency(150);
                                                Call Draw Line(X1)(Y2) to(X2)(Y1) color(100)(100)(100) size(12) transparency(150);
                                            }
                                            Else
                                            {
                                                If ((T == "Move") And Editor?)
                                                {
                                                    Call Draw Line(X1)(Y1) to(X1)(Y1) color(255)(200)(0) size(12) transparency(200);
                                                    Call Draw Line(X1)(Y1) to(X2)(Y2) color(255)(200)(0) size(4) transparency(200);
                                                }
                                                Else
                                                {
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

Define Get point(string X)(string Y) (warp=true)
{
    draw.x = ((X - CameraX) * (CameraScale * UIScaling));
    draw.y = ((Y - CameraY) * (CameraScale * UIScaling));
}

Define Go to(string X)(string Y) (warp=true)
{
    Call Get point(X)(Y);
    Motion.GoToXY(draw.x, draw.y);
}

Define Initialize (warp=true)
{
    Motion.GoToXY(0, 0);
    Looks.Hide();
    Call Set Size to(1000) %;
    Pen.Clear();
    padding = 10;
    penBounds.x = ((ResolutionX / 2) + padding);
    penBounds.y = ((ResolutionY / 2) + padding);
    maxGhosts = 5;
    Call Reset Ghosting;
}

Define Is line(string X1)(string Y1) to(string X2)(string Y2) in bounds? (warp=true)
{
    Call Get point(X2)(Y2);
    draw.x2 = draw.x;
    draw.y2 = draw.y;
    Call Get point(X1)(Y1);
    If ((((draw.x > penBounds.x) And (draw.x2 > penBounds.x)) Or ((draw.x < (-1 * penBounds.x)) And (draw.x2 < (-1 * penBounds.x)))) Or (((draw.y > penBounds.y) And (draw.y2 > penBounds.y)) Or ((draw.y < (-1 * penBounds.y)) And (draw.y2 < (-1 * penBounds.y)))))
    {
        inBounds = "false";
    }
    Else
    {
        inBounds = "true";
    }
}

Define Is point(string X)(string Y) in bounds? (warp=true)
{
    Call Get point(X)(Y);
    If ((abs(draw.x) > penBounds.x) Or (abs(draw.y) > penBounds.y))
    {
        inBounds = "false";
    }
    Else
    {
        inBounds = "true";
    }
}

Define Reset Ghosting (warp=true)
{
    List.DeleteAll(prevPlayerX);
    List.DeleteAll(prevPlayerY);
}

Define Set Pen Color | RGBA(string R)(string G)(string B)(string A) (warp=true)
{
    Pen.SetPenColorToColor((Operator.Round(B) + (256 * (Operator.Round(G) + (256 * (Operator.Round(R) + (256 * Operator.Round(A))))))));
}

Define Set pen size to(string S) (warp=true)
{
    Pen.SetPenSizeTo((S * (CameraScale * UIScaling)));
}

Define Set Size to(string %) % (warp=true)
{
    Looks.SwitchCostumeTo(Blank);
    Looks.SetSizeTo(%);
    Looks.SwitchCostumeTo(Pen);
}

Define Start Pen (warp=false)
{
    Call Reset Ghosting;
    DrawEnabled = "true";
    Repeat Until (DrawEnabled == "false")
    {
        Pen.Clear();
        If (TextSubsystemEnabled == "true")
        {
            Event.Broadcast("RenderGameUI");
        }
        Call Draw Frame(((UIEnabled == "true") And (UIName == "Editor")));
        If (PlayerDrawEnabled == "false")
        {
            Call Reset Ghosting;
        }
        Else
        {
            Call Draw Player;
        }
        Event.Broadcast("CalcFramerate");
    }
}


//----- Costumes ------------------------------------------------------------------------------------------------------

Blank.svg
Pen.png
